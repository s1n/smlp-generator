#!/usr/bin/perl

use Tie::File;
use strict;
use warnings;
use feature ':5.10';
use Pod::Usage;
use Getopt::Long;
use File::Basename;

my %opts = (files => undef,
            corpus => undef,
            imgdir => undef,
            hrefdir => undef,
            textrepl => undef,
            hrefrepl => undef,
            imgrepl => undef,
            help => undef);
GetOptions('files:s@' => \$opts{files},
           'corpus:s' => \$opts{corpus},
           'imgdir:s' => \$opts{imgdir},
           'hrefdir:s' => \$opts{hrefdir},
           'textrepl' => \$opts{textrepl},
           'hrefrepl' => \$opts{hrefrepl},
           'imgrepl' => \$opts{imgrepl},
           'help' => \$opts{help}) or pod2usage(2);
pod2usage(1) if $opts{help};
$opts{imgdir} //= 'images';
$opts{hrefdir} //= 'href';

mkdir $_ for ($opts{imgdir}, $opts{hrefdir});

for my $file(@{$opts{files}}) {
    my @data = &slurp($file);
    my @rendered;
    for my $line(@data) {
        say "$line";
        $line = &text_replace($line) if $opts{textrepl};
        $line = &img_replace($line) if $opts{imgrepl};
        $line = &href_replace($line) if $opts{hrefrepl};
        push @rendered, $line if $line;
    }
    &squirt($file, @data);
}

###
### Replaces TEXT instances with Markov generated text.
###
sub text_replace {
    my ($line) = @_;
    while($line =~ /TEXT/) {
        my @result = `generate.pl --cache model.mem --num 2`;
        my $jibberish = pop @result;
        chomp $jibberish;
        $line =~ s/TEXT/$jibberish/;
    }
    $line;
}

###
### Replaces IMG tags, which may be URLs, full|relative path files
###
sub img_replace {
    my ($line) = @_;
    my $file = $line =~ /img src=\"(.*?)\"/;
    if($1) {
        my ($bname) = fileparse($1);
        $bname = quotemeta $bname;
        my @found = `find $opts{corpus} -name $bname`;
        chomp @found;
        if(@found) {
            my $chosen = $found[int rand(@found)] // $file;
            `cp $chosen $opts{imgdir}`;
            $chosen = "$opts{imgdir}/$bname";
            print "CHOSEN: $chosen\n";
            $line =~ s/$1/$chosen/;
            say "After: $line";
        }
    }
    $line;
}

sub href_replace {
    my ($line) = @_;
    my $href = $line =~ /a href=\"(.*?)\"/;
    if($1) {
        my ($bname) = fileparse($1);
        $bname = quotemeta $bname;
        my @found = `find $opts{corpus} -name $bname`;
        chomp @found;
        if(@found) {
            my $chosen = $found[int rand(@found)];
            $line =~ s/$1/$chosen/;
        }
    }
    $line;
}

sub slurp {
    my ($filename) = @_;
    open FILE, $filename or die "barf on $filename: $!\n";
    my @data = <FILE>;
    close FILE;
    @data;
}

sub squirt {
    my ($filename, @data) = @_;
    open FILE, ">$filename" or die "barf on $filename: $!\n";
    print FILE @data;
    close FILE;
}

__END__

=head1 DESCRIPTION

Surface renders the HTML page from the corpus as best as possible. All necessary
images, links, and referenced files are copied as need be.

=head1 SYNOPSIS

=over 4

=item B<--files>

Specifies a number of files to process, one after the other.

=item B<--corpus>

Specifies the location of the corpus. In the event that a referenced file or
linked page is located here, it will be copied accordingly.

=item B<--imgdir>

Specifies the output directory of images copied from the corpus. 

=item B<--hrefdir>

Specifies the output directory of linked files copied from the corpus.

=item B<--textrepl>

Turns on TEXT token replacement. If the token TEXT appears in the file being
processed, replace it with autogenerated text by using the Homework 2 program.

This text is based on the prebuilt model and generates 2 sentences.

=item B<--hrefrepl>

Turns on link replacement identified as '<a href="...">' tokens. See
B<--hrefdir> for additional behavior.

=item B<--imgrepl>

Turns on image replacement identified as '<img src="...">' tokens. See
B<--imgdir> for additional behavior.

=item B<--help>

Prints a verbose help message.

=back

=cut
